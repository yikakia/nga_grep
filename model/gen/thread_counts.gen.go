// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/yikakia/nga_grep/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newThreadCount(db *gorm.DB, opts ...gen.DOOption) threadCount {
	_threadCount := threadCount{}

	_threadCount.threadCountDo.UseDB(db, opts...)
	_threadCount.threadCountDo.UseModel(&model.ThreadCount{})

	tableName := _threadCount.threadCountDo.TableName()
	_threadCount.ALL = field.NewAsterisk(tableName)
	_threadCount.DateTime = field.NewInt64(tableName, "date_time")
	_threadCount.Count_ = field.NewInt(tableName, "count")

	_threadCount.fillFieldMap()

	return _threadCount
}

type threadCount struct {
	threadCountDo

	ALL      field.Asterisk
	DateTime field.Int64
	Count_   field.Int

	fieldMap map[string]field.Expr
}

func (t threadCount) Table(newTableName string) *threadCount {
	t.threadCountDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t threadCount) As(alias string) *threadCount {
	t.threadCountDo.DO = *(t.threadCountDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *threadCount) updateTableName(table string) *threadCount {
	t.ALL = field.NewAsterisk(table)
	t.DateTime = field.NewInt64(table, "date_time")
	t.Count_ = field.NewInt(table, "count")

	t.fillFieldMap()

	return t
}

func (t *threadCount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *threadCount) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 2)
	t.fieldMap["date_time"] = t.DateTime
	t.fieldMap["count"] = t.Count_
}

func (t threadCount) clone(db *gorm.DB) threadCount {
	t.threadCountDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t threadCount) replaceDB(db *gorm.DB) threadCount {
	t.threadCountDo.ReplaceDB(db)
	return t
}

type threadCountDo struct{ gen.DO }

type IThreadCountDo interface {
	gen.SubQuery
	Debug() IThreadCountDo
	WithContext(ctx context.Context) IThreadCountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IThreadCountDo
	WriteDB() IThreadCountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IThreadCountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IThreadCountDo
	Not(conds ...gen.Condition) IThreadCountDo
	Or(conds ...gen.Condition) IThreadCountDo
	Select(conds ...field.Expr) IThreadCountDo
	Where(conds ...gen.Condition) IThreadCountDo
	Order(conds ...field.Expr) IThreadCountDo
	Distinct(cols ...field.Expr) IThreadCountDo
	Omit(cols ...field.Expr) IThreadCountDo
	Join(table schema.Tabler, on ...field.Expr) IThreadCountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IThreadCountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IThreadCountDo
	Group(cols ...field.Expr) IThreadCountDo
	Having(conds ...gen.Condition) IThreadCountDo
	Limit(limit int) IThreadCountDo
	Offset(offset int) IThreadCountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IThreadCountDo
	Unscoped() IThreadCountDo
	Create(values ...*model.ThreadCount) error
	CreateInBatches(values []*model.ThreadCount, batchSize int) error
	Save(values ...*model.ThreadCount) error
	First() (*model.ThreadCount, error)
	Take() (*model.ThreadCount, error)
	Last() (*model.ThreadCount, error)
	Find() ([]*model.ThreadCount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThreadCount, err error)
	FindInBatches(result *[]*model.ThreadCount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ThreadCount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IThreadCountDo
	Assign(attrs ...field.AssignExpr) IThreadCountDo
	Joins(fields ...field.RelationField) IThreadCountDo
	Preload(fields ...field.RelationField) IThreadCountDo
	FirstOrInit() (*model.ThreadCount, error)
	FirstOrCreate() (*model.ThreadCount, error)
	FindByPage(offset int, limit int) (result []*model.ThreadCount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IThreadCountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t threadCountDo) Debug() IThreadCountDo {
	return t.withDO(t.DO.Debug())
}

func (t threadCountDo) WithContext(ctx context.Context) IThreadCountDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t threadCountDo) ReadDB() IThreadCountDo {
	return t.Clauses(dbresolver.Read)
}

func (t threadCountDo) WriteDB() IThreadCountDo {
	return t.Clauses(dbresolver.Write)
}

func (t threadCountDo) Session(config *gorm.Session) IThreadCountDo {
	return t.withDO(t.DO.Session(config))
}

func (t threadCountDo) Clauses(conds ...clause.Expression) IThreadCountDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t threadCountDo) Returning(value interface{}, columns ...string) IThreadCountDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t threadCountDo) Not(conds ...gen.Condition) IThreadCountDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t threadCountDo) Or(conds ...gen.Condition) IThreadCountDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t threadCountDo) Select(conds ...field.Expr) IThreadCountDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t threadCountDo) Where(conds ...gen.Condition) IThreadCountDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t threadCountDo) Order(conds ...field.Expr) IThreadCountDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t threadCountDo) Distinct(cols ...field.Expr) IThreadCountDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t threadCountDo) Omit(cols ...field.Expr) IThreadCountDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t threadCountDo) Join(table schema.Tabler, on ...field.Expr) IThreadCountDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t threadCountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IThreadCountDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t threadCountDo) RightJoin(table schema.Tabler, on ...field.Expr) IThreadCountDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t threadCountDo) Group(cols ...field.Expr) IThreadCountDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t threadCountDo) Having(conds ...gen.Condition) IThreadCountDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t threadCountDo) Limit(limit int) IThreadCountDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t threadCountDo) Offset(offset int) IThreadCountDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t threadCountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IThreadCountDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t threadCountDo) Unscoped() IThreadCountDo {
	return t.withDO(t.DO.Unscoped())
}

func (t threadCountDo) Create(values ...*model.ThreadCount) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t threadCountDo) CreateInBatches(values []*model.ThreadCount, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t threadCountDo) Save(values ...*model.ThreadCount) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t threadCountDo) First() (*model.ThreadCount, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThreadCount), nil
	}
}

func (t threadCountDo) Take() (*model.ThreadCount, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThreadCount), nil
	}
}

func (t threadCountDo) Last() (*model.ThreadCount, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThreadCount), nil
	}
}

func (t threadCountDo) Find() ([]*model.ThreadCount, error) {
	result, err := t.DO.Find()
	return result.([]*model.ThreadCount), err
}

func (t threadCountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThreadCount, err error) {
	buf := make([]*model.ThreadCount, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t threadCountDo) FindInBatches(result *[]*model.ThreadCount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t threadCountDo) Attrs(attrs ...field.AssignExpr) IThreadCountDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t threadCountDo) Assign(attrs ...field.AssignExpr) IThreadCountDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t threadCountDo) Joins(fields ...field.RelationField) IThreadCountDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t threadCountDo) Preload(fields ...field.RelationField) IThreadCountDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t threadCountDo) FirstOrInit() (*model.ThreadCount, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThreadCount), nil
	}
}

func (t threadCountDo) FirstOrCreate() (*model.ThreadCount, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThreadCount), nil
	}
}

func (t threadCountDo) FindByPage(offset int, limit int) (result []*model.ThreadCount, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t threadCountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t threadCountDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t threadCountDo) Delete(models ...*model.ThreadCount) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *threadCountDo) withDO(do gen.Dao) *threadCountDo {
	t.DO = *do.(*gen.DO)
	return t
}
